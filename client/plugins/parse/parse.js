// Generated by CoffeeScript 1.4.0
(function() {

  window.plugins.parse = {
    emit: function(div, item) {},
    bind: function(div, item) {
      var assemble, discard, isNumber, nextOp, print, socket, start, stats, stop, tick;
      div.dblclick(function() {
        return wiki.textEditor(div, item);
      });
      nextOp = function(state) {
        switch (item.state) {
          case void 0:
            return "Start";
          case "starting":
          case "running":
            return "Stop";
          case "stopped":
          case "finished":
            return "Discard";
        }
      };
      isNumber = function(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
      };
      stats = function() {
        var key, rows, value, _i, _len, _ref;
        rows = [];
        _ref = ['state', 'server', 'parsed'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          key = _ref[_i];
          if (value = item[key]) {
            if (isNumber(value)) {
              value = value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
            }
            rows.push("<tr><td>" + key + "<td>" + value);
          }
        }
        return rows.join("\n");
      };
      div.append("<div style=\"background:#eee; padding:.8em; margin-bottom:5px;\">\n  <table>" + (stats()) + "</table>\n  <button type=\"button\">" + (nextOp(item.state)) + " Parse</button>\n</div>");
      assemble = function() {
        var idx, peg;
        if (item.state !== void 0) {
          return;
        }
        idx = $('.item').index(div);
        peg = $(".item:lt(" + idx + ")").filter('.code');
        return wiki.log('peg', idx, peg, peg.text());
      };
      assemble();
      tick = function() {
        var timer;
        if (item.state !== 'running') {
          return;
        }
        if (item.parsed > 130000000) {
          return stop('finished');
        }
        item.parsed += Math.round(1666666 * Math.random());
        div.find('table').html(stats());
        return timer = setTimeout(tick, 100);
      };
      start = function() {
        wiki.log("start parse", item);
        return wiki.createItem(null, div, $.extend(true, {}, item, {
          state: "starting",
          parsed: 0
        }));
      };
      stop = function(state) {
        var timer;
        clearTimeout(timer);
        timer = null;
        item.state = state || 'stopped';
        div.find('table').html(stats());
        return div.find('button').text("" + (nextOp(item.state)) + " Parse");
      };
      discard = function() {
        return wiki.removeItem(div, item);
      };
      div.find('button').click(function(event) {
        switch (item.state) {
          case void 0:
            return start();
          case "starting":
          case "running":
            return stop();
          case "stopped":
          case "finished":
            return discard();
        }
      });
      if (item.state === 'starting') {
        socket = new WebSocket('ws://' + window.document.location.host + '/system/logwatch');
        item.state = 'running';
        tick();
        print = function(m) {
          item.server = m;
          return div.find('table').html(stats());
        };
        socket.onopen = function() {
          return print("opened");
        };
        socket.onmessage = function(e) {
          var msg;
          msg = JSON.parse(e.data);
          return print(wiki.resolveLinks("page [[" + msg.title + "]]"));
        };
        return socket.onclose = function() {
          return print("closed");
        };
      }
    }
  };

}).call(this);
